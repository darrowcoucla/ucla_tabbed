<?php
/**
 * @file
 * Defines tabbed custom search form allowing user to choose from multiple search targets.
 */

/** ***********************************************************************************************************************
 * Form constructor for the tabbed search.
 *
 * Notice a container element is used when we need to use #states form key.
 * There seems to be a problem in drupal core when trying to use it directly
 * from inside a vertical tab'ed form.
 *
 * @fixme Add extra callback for external POST requests.
 * @todo Maybe split on several forms, one per tab.
 */
function ucla_tab_search_form($form, &$form_state) {
//krumo("Hello"); // greeting
////////////////////////////////////////////////////////////////////////////////
// prep for Reserves search
////////////////////////////////////////////////////////////////////////////////

// grab the PID and SEQ from Voyager
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, 'http://catalog.library.ucla.edu/cgi-bin/Pwebrecon.cgi?DB=local&PAGE=First');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
$response = curl_exec ($ch);
curl_setopt($ch, CURLOPT_VERBOSE, 1);
curl_setopt($ch, CURLOPT_HEADER, 1);
$header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
$header = substr($response, 0, $header_size);
$body = substr($response, $header_size);
$my_pid_resp = preg_match('/cgi-bin\/Pwebrecon\.cgi\?PAGE=rbSearch&SEQ=\d+&PID=.+\">Course Reserves/', $body, $my_pid0);
$my_pid_resp = preg_match('/.+[^">Course Reserves]/', $my_pid0[0], $my_pid1);
$my_pid_resp = preg_match('/PID=.+/', $my_pid1[0], $my_pid2);
$my_pid_resp = preg_match('/[^PID=].+/', $my_pid2[0], $my_pid3);
$my_seq_resp = preg_match('/SEQ=\d\d\d\d\d\d\d\d\d\d\d\d\d\d/', $body, $my_seq0);
$my_seq_resp = preg_match('/\d\d\d\d\d\d\d\d\d\d\d\d\d\d/', $my_seq0[0], $my_seq1);
$search_pid = $my_pid3[0];
$search_seq = $my_seq1[0];
curl_close ($ch);

// retrieve the lists of Instructors, Departments and Courses for local select dropdowns
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, 'http://catalog.library.ucla.edu/'.$my_pid1[0]);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
$response = curl_exec ($ch);
$page_array = explode("\n", $response);
$select_flag = 0;
$i = 0;
foreach( $page_array as $row ){
  if( strpos( strtolower($row), '<select name="inst">' ) !== false ) {
    $select_flag = 1;
    $select_num = 0;
  } else if( strpos( strtolower($row), '<select name="dept">' ) !== false ) {
    $select_flag = 1;
    $select_num = 1;
  } else if( strpos( strtolower($row), '<select name="crse">' ) !== false ) {
    $select_flag = 1;
    $select_num = 2;
  } else if ( $select_flag == 1 ){
    if ( strpos( strtolower($row), '</select>' ) !== false ){
      $select_flag = 0;
    } else {
      $row = preg_replace('/<OPTION VALUE="/','', $row);
      $row = preg_replace('/^\s+/','', $row);
      $row = preg_replace('/<\/OPTION>/','', $row);
      $select_options = explode('">', $row);
      $select_options_array[$select_num][$i] = $select_options[0];
      $i+=1;
      $select_options_array[$select_num][$i] = $select_options[1];
      $i+=1;
    }
  }
}

// build out arrays for local select dropdowns
$length = count($select_options_array[0]);
for ($i = 0; $i < $length; $i++)
{
    $select_options_array_inst[$select_options_array[0][$i]] = $select_options_array[0][$i+1];
//    $select_options_array_string[] = "'".$select_options_array[0][$i]."' => t('".$select_options_array[0][$i+1]."'),";
    $i++;
}
$length = count($select_options_array[1]);
for ($j = $i; $j < $length+$i; $j++)
{
    $select_options_array_dept[$select_options_array[1][$j]] = $select_options_array[1][$j+1];
    $j++;
}
$length = count($select_options_array[2]);
for ($k = $j; $k < $length+$j-1; $k++) // -1 to avoid leaving pointer past the end of the array (causes krumo fail)
{
    $select_options_array_crse[$select_options_array[2][$k]] = $select_options_array[2][$k+1];
    $k++;
}

curl_close ($ch);
////////////////////////////////////////////////////////////////////////////////
// END prep for Reserves search
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// set up tabs
////////////////////////////////////////////////////////////////////////////////
  $form['tabs'] = array(
    '#type' => 'vertical_tabs',
    '#default_tab' => 'edit-books',
  );
  $fieldset_default = array(
    '#type' => 'fieldset',
    '#group' => 'tabs',
    '#collapsible' => TRUE,
    '#tree' => TRUE,
  );
  $search_button = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );
  $query_textfield = array(
    '#type' => 'textfield',
  );

  ////////////////////////////////////////////////////////////////////////////////
  // Books & more tab.
  // Books & more tab.
  // Books & more tab.
  $form['books'] = array(
    '#title' => t('Books & more'),
  ) + $fieldset_default;

  $form['books']['text_query'] = $query_textfield;

  $form['books']['text_query']['#attributes'] = array(
    'placeholder' => t('Find book, journals, selected articles* and more.'),
  );

  $form['books']['catalog'] = array(
    '#type' => 'radios',
    '#options' => array(
        'BM-Mel' => t('Melvyl UC Catalog (+selected articles)'),
        'BM-CAT' => t('UCLA Library Catalog'),
    ),
    '#default_value' => 'BM-Mel',
  );

  $form['books']['catalog_container_mel'] = array(
    '#type' => 'container',
    '#states' => array(
      'visible' => array(':input[name="books[catalog]"]' => array('value' => 'BM-Mel')),
    ),
  );

  $form['books']['catalog_container_mel']['description'] = array(
    '#markup' => t('@todo: A description associate d with BM-Mel.'),
  );

  $form['books']['catalog_container_cat'] = array(
    '#type' => 'container',
    '#states' => array(
      'visible' => array(':input[name="books[catalog]"]' => array('value' => 'BM-CAT')),
    ),
  );

  $form['books']['catalog_container_cat']['description'] = array(
    '#markup' => t('@todo: A description associated with BM-CAT.'),
  );

  $form['books']['ucla_catalog_search_index'] = array(
    '#type' => 'select',
    '#options' => array(
        'GKEY^' => t('Keyword'),
        'TKEY^' => t('Title'),
        'TAL2' => t('Title - start of'),
        'TKEY' => t('Title phrase'),
        'JKEY^' => t('Journal title'),
        'JAL2' => t('Journal title - start of'),
        'SEKW' => t('Series title'),
        'NAME@' => t('Author list'),
        'NAME+' => t('Author List (last name, first name)'),
        'AUTH@' => t('Author and title list'),
        'SUBJ@' => t('Subject list'),
        'SUBJ+' => t('Subject list - start of'),
        'CALL+' => t('Call number'),
        'ISBN' => t('ISBN'),
        'ISSN' => t('ISSN'),
    ),
    '#states' => array(
      'visible' => array(':input[name="books[catalog]"]' => array('value' => 'BM-CAT')),
    ),
  );

  $form['books']['books_search'] = $search_button;
  $form['books']['books_search']['#name'] = 'op_books';


  ////////////////////////////////////////////////////////////////////////////////
  // Articles tab.
  // Articles tab.
  // Articles tab.
  $form['articles'] = array(
    '#title' => t('Articles'),
  ) + $fieldset_default;
  $form['articles']['text_query'] = $query_textfield;
  $form['articles']['text_query']['#attributes'] = array(
    'placeholder' => t('Quick article search. Search several databases at once.'),
  );
  $form['articles']['search_index'] = array(
    '#type' => 'select',
    '#options' => array(
        'title' => t('Title'),
        'author' => t('Author'),
        'fulltext' => t('Full text'),
        'keyword' => t('Keyword'),
        'subject' => t('Subject'),
        'abstract' => t('Abstract'),
        'isbn' => t('ISBN'),
        'issn' => t('ISSN'),
    ),
  );
  $form['articles']['search_year'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
        'placeholder' => t('Year (yyyy)'),
    ),
  );
  $form['articles']['search_categories'] = array(
    '#type' => 'checkboxes',
    '#options' => array(
      '103267' => t('Arts and Humanities'),
      '103349' => t('Business and economics'),
      '103269' => t('Engineering and Aplied Sciences'),
      '103266' => t('General'),
      '103378' => t('Health and Life Sciences'),
      '103270' => t('Physical Sciences and Mathematics'),
      '103268' => t('Social Sciences'),
    ),
  );
  $form['articles']['articles_search'] = $search_button;
  $form['articles']['articles_search']['#name'] = 'op_articles';
  $form['articles']['description'] = array(
    '#markup' => t('@todo: A description associated with articles tab.'),
  );


  ////////////////////////////////////////////////////////////////////////////////
  // Database's tab.
  // Database's tab.
  // Database's tab.
  $form['databases'] = array(
    '#title' => t('Databases'),
  ) + $fieldset_default;
  $form['databases']['text_query'] = $query_textfield;
  $form['databases']['text_query']['#attributes'] = array(
    'placeholder' => t('search for a database title'),
  );
  $form['databases']['sfx_search_index_container'] = array(
    '#type' => 'container',
    '#states' => array(
      'visible' => array(':input[name="databases[databases_catalog]"]' => array('value' => 'ONE')),
    ),
  );
  $form['databases']['ucla_tabbed_index_container'] = array(
    '#type' => 'container',
    '#states' => array(
      'visible' => array(':input[name="databases[databases_catalog]"]' => array('value' => 'TWO')),
    ),
  );
  $form['databases']['method'] = array(
    '#type' => 'radios',
    '#options' => array(
        'within' => t('Contains'),
        'starts' => t('Starts with'),
    ),
    '#default_value' => 'within',
  );
  $form['databases']['databases_search'] = $search_button;
  $form['databases']['databases_search']['#name'] = 'op_databases';


  ////////////////////////////////////////////////////////////////////////////////
  // Journals tab.
  // Journals tab.
  // Journals tab.
  $form['journals'] = array(
    '#title' => t('Journals'),
  ) + $fieldset_default;
  $form['journals']['text_query'] = $query_textfield;
  $form['journals']['text_query']['#attributes'] = array(
    'placeholder' => t('search e-journal titles.'),
  );
  $form['journals']['catalog'] = array(
    '#type' => 'radios',
    '#options' => array(
        'J-E' => t('SFX for e-journals'),
        'J-ALL' => t('UCLA Library Catalog for print and e-journals'),
    ),
  );
  $form['journals']['sfx_search_index_container'] = array(
    '#type' => 'container',
    '#states' => array(
      'visible' => array(':input[name="journals[catalog]"]' => array('value' => 'J-E')),
    ),
  );
  $form['journals']['sfx_search_index_container']['sfx_search_index'] = array(
    '#type' => 'radios',
    '#options' => array(
        'within' => t('Contains'),
        'starts' => t('Starts with'),
        'exact' => t('Exact'),
    ),
    '#default_value' => 'within',
  );
  $form['journals']['ucla_tabbed_index_container'] = array(
    '#type' => 'container',
    '#states' => array(
      'visible' => array(':input[name="journals[catalog]"]' => array('value' => 'J-ALL')),
    ),
  );
  $form['journals']['ucla_tabbed_index_container']['ucla_tabbed_index'] = array(
    '#type' => 'radios',
    '#options' => array(
        'JKEY' => t('Contains'),
        'JAL2' => t('Starts with'),
    ),
    '#default_value' => 'JKEY',
  );
  $form['journals']['journals_search'] = $search_button;
  $form['journals']['journals_search']['#name'] = 'op_journals';


  ////////////////////////////////////////////////////////////////////////////////
  // Guides's tab.
  // Guides's tab.
  // Guides's tab.
  $form['guides'] = array(
    '#title' => t('Research Guides'),
  ) + $fieldset_default;
  $form['guides']['text_query'] = $query_textfield;
  $form['guides']['text_query']['#attributes'] = array(
    'placeholder' => t('search for a database title'),
  );
  $form['guides']['guides_search'] = $search_button;
  $form['guides']['guides_search']['#name'] = 'op_guides';


  ////////////////////////////////////////////////////////////////////////////////
  // Reserves tab.
  // Reserves tab.
  // Reserves tab.
  $form['reserves'] = array(
    '#title' => t('Reserves'),
  ) + $fieldset_default;

  $form['reserves']['search_pid'] = array('#type' => 'hidden', '#value' => $search_pid);
  $form['reserves']['search_seq'] = array('#type' => 'hidden', '#value' => $search_seq);

  $form['reserves']['catalog_container_inst']['description'] = array(
    '#markup' => 'Instructor:',
  );
  $form['reserves']['ucla_reserves_inst_index'] = array(
    '#type' => 'select',
    '#options' => $select_options_array_inst,
  );

  $form['reserves']['catalog_container_dept']['description'] = array(
    '#markup' => 'Department:',
  );
  $form['reserves']['ucla_reserves_dept_index'] = array(
    '#type' => 'select',
    '#options' => $select_options_array_dept,
  );

  $form['reserves']['catalog_container_crse']['description'] = array(
    '#markup' => 'Course:',
  );
  $form['reserves']['ucla_reserves_crse_index'] = array(
    '#type' => 'select',
    '#options' => $select_options_array_crse,
  );

  $form['reserves']['reserves_search'] = $search_button;
  $form['reserves']['reserves_search']['#name'] = 'op_reserves';


  ////////////////////////////////////////////////////////////////////////////////
  // oac's tab.
  // oac's tab.
  // oac's tab.
  $form['oac'] = array(
    '#title' => t('OAC'),
  ) + $fieldset_default;
  $form['oac']['text_query'] = $query_textfield;
  $form['oac']['text_query']['#attributes'] = array(
    'placeholder' => t('search the OAC for a manuscript or archive'),
  );
  $form['oac']['oac_search'] = $search_button;
  $form['oac']['oac_search']['#name'] = 'op_oac';


  ////////////////////////////////////////////////////////////////////////////////

/*
  // Citation tab.
  $form['citation'] = array(
    '#title' => t('Citation Linker'),
  ) + $fieldset_default;
  $form['citation']['citation_search'] = $search_button;
  $form['citation']['citation_search']['#name'] = 'op_citation';

  // Course Reserves tab.
  $form['course'] = array(
    '#title' => t('Course Reserves'),
  ) + $fieldset_default;
  $form['course']['course_search'] = $search_button;
  $form['course']['course_search']['#name'] = 'op_course';
*/

  return $form;

}


/** ***********************************************************************************************************************
 * Form submission handler for ucla_tab_search_form().
 *
 * This is mainly about mapping values preparing them to the othe submit
 * handler.
 * Notice form_id is renamed to ucla_form_id in order to avoid collision with
 * Drupal core forms form_id also provided automatically.
 */
function ucla_tab_search_form_submit($form, &$form_state) {
/*
//test
  module_load_include('inc', 'ucla_search', 'includes/ucla_search_logger');
  module_load_include('inc', 'ucla_search', 'includes/ucla_search_handlers');
  // Collect form info
  $search_target = 'melvyl';
  $search_terms = 'education';
//  $search_target = $form['search_target']['#value'];
//  $search_terms = $form['search_terms']['#value'];
  $search_date = $_SERVER['REQUEST_TIME'];
  // If behind varnish, REMOTE_ADDR = IP of the varnish server
  // and HTTP_X_FORWARDED_FOR = IP of remote user
  $browser_ip = (isset($_SERVER['HTTP_X_FORWARDED_FOR']) ? $_SERVER['HTTP_X_FORWARDED_FOR'] : $_SERVER['REMOTE_ADDR']);

  // Put form info into array expected by search logger / handlers
  $search_info = array (
    'search_target' => $search_target,
    'search_terms' => $search_terms,
    'search_date' => $search_date,
    'browser_ip' => $browser_ip,
  );

  // Send search info to router, which will do the actual search
  ucla_search_route_search($search_info);

drupal_set_message(t('debug message'));
//test
*/


  module_load_include('inc', 'ucla_tabbed', 'includes/ucla_search_logger');
  module_load_include('inc', 'ucla_tabbed', 'includes/ucla_search_handlers');
  $search_date = $_SERVER['REQUEST_TIME'];
  $browser_ip = (isset($_SERVER['HTTP_X_FORWARDED_FOR']) ? $_SERVER['HTTP_X_FORWARDED_FOR'] : $_SERVER['REMOTE_ADDR']);

  $tab_form_id_map = array(
    'books' => array('BM-CAT' => 'BM-CAT', 'BM-Mel' => 'BM-Mel'),
    'articles' => array('ART' => 'ART', 'article' => 'article'),
    'journals' => array('J-ALL' => 'J-ALL', 'J-E' => 'J-E'),
    'databases' => array('within' => 'within', 'starts' => 'starts'),
    'guides' => array('within' => 'within', 'starts' => 'starts'),
    'reserves' => array('within' => 'within', 'starts' => 'starts'),
    'oac' => array('within' => 'within', 'starts' => 'starts'),
  );

  foreach ($tab_form_id_map as $tab => $maps) {
    // The submit button name is used to decide where we are.
    if (empty($form_state['values']["op_$tab"])) {
      // Not this tab.
      continue;
    }
    if (is_array($maps)) {
      switch ($tab) {
        case 'books':
          $form_state['values']['ucla_form_id'] = $maps[$form_state['values']['books']['catalog']];
	    switch ( $maps[$form_state['values']['books']['catalog']] ) {
	      case 'BM-Mel':
		// Put form info into array expected by search logger / handlers
		$search_info = array (
		'search_target' => 'melvyl',
		'search_terms' => $form_state['values']['books']['text_query'],
		'search_date' => $search_date,
		'browser_ip' => $browser_ip,
		);
		break;
	      case 'BM-CAT':
		// Put form info into array expected by search logger / handlers
		$search_info = array (
		'search_target' => 'catalog',
		'search_terms' => $form_state['values']['books']['text_query'],
		'search_code' => $form_state['values']['books']['ucla_catalog_search_index'],
		'search_date' => $search_date,
		'browser_ip' => $browser_ip,
		);
		break;
	    }
	break;

        case 'articles':
	  $search_categories_codes = '';
	  foreach ($form_state['values']['articles']['search_categories'] as $search_categories_code) {
	    if( $search_categories_code > 0 ){
	      $search_categories_codes .= ' '.$search_categories_code;
	      }
	    }
	    if( $form_state['values']['articles']['search_year'] > 0 ){
	      $search_year = $form_state['values']['articles']['search_year'];
	    } else {
	      $search_year = 'date';
	    }
	  // Put form info into array expected by search logger / handlers
	  $search_info = array (
	  'search_target' => 'articles',
	  'search_terms' => $form_state['values']['articles']['text_query'],
	  'search_code' => $form_state['values']['articles']['search_index'],
	  'search_year' => $search_year,
	  'search_categories' => $search_categories_codes,
	  'search_date' => $search_date,
	  'browser_ip' => $browser_ip,
	  );
	  ucla_search_route_search($search_info);
	break;

        case 'databases':
	  $search_categories_codes = '';
	  foreach ($form_state['values']['articles']['search_categories'] as $search_categories_code) {
	    if( $search_categories_code > 0 ){
	      $search_categories_codes .= ' '.$search_categories_code;
	      }
	    }
	  if( $form_state['values']['articles']['search_year'] > 0 ){
	    $search_year = $form_state['values']['articles']['search_year'];
	  } else {
	    $search_year = 'date';
	  }
	  switch ( $maps[$form_state['values']['databases']['method']] ) {
	    case 'within':
	      // Put form info into array expected by search logger / handlers
	      $search_info = array (
	      'search_target' => 'database',
	      'search_type' => 'contains',
	      'search_terms' => $form_state['values']['databases']['text_query'],
	      'search_date' => $search_date,
	      'browser_ip' => $browser_ip,
	      );
	    break;
	    case 'starts':
	      // Put form info into array expected by search logger / handlers
	      $search_info = array (
	      'search_target' => 'database',
	      'search_type' => 'starts',
	      'search_terms' => $form_state['values']['databases']['text_query'],
	      'search_date' => $search_date,
	      'browser_ip' => $browser_ip,
	      );
	      break;
	  }
        break;

        case 'journals_dev':
          $form_state['values']['ucla_form_id'] = $maps[$form_state['values']['journals']['catalog']];
	    switch ( $maps[$form_state['values']['journals']['catalog']] ) {
	      case 'J-ALL':
		foreach ( $form_state['values']['journals']['ucla_tabbed_index_container']['ucla_tabbed_index'] as $tab => $type_choice ) {
		  // The submit button name is used to decide where we are.
		  if (empty( $form_state['values']['journals']['ucla_tabbed_index_container']['ucla_tabbed_index']['$tab'] )) {
		    // Not this tab.
		    continue;
		  }
		}
		// Put form info into array expected by search logger / handlers
		$search_info = array (
		'search_target' => 'melvyl',
		'search_terms' => $form_state['values']['books']['text_query'],
		'search_date' => $search_date,
		'browser_ip' => $browser_ip,
		);
	      break;
	      case 'J-E':
		// Put form info into array expected by search logger / handlers
		$search_info = array (
		'search_target' => 'catalog',
		'search_terms' => $form_state['values']['books']['text_query'],
		'search_code' => $form_state['values']['books']['ucla_catalog_search_index'],
		'search_date' => $search_date,
		'browser_ip' => $browser_ip,
		);
	      break;
	    }
        break;

        case 'journals':
          $form_state['values']['ucla_form_id'] = $maps[$form_state['values']['journals']['catalog']];
	    switch ( $maps[$form_state['values']['journals']['catalog']] ) {
	      case 'J-ALL':
		$search_info = array (
		'search_target' => 'catalog',
		'search_terms' => $form_state['values']['journals']['text_query'],
		'search_code' => $form_state['values']['journals']['ucla_tabbed_index_container']['ucla_tabbed_index'],
		'search_date' => $search_date,
		'browser_ip' => $browser_ip,
		);
	      break;
	      case 'J-E':
		$search_info = array (
		'search_target' => 'sfx',
		'search_terms' => $form_state['values']['journals']['text_query'],
		'search_type' => $form_state['values']['journals']['sfx_search_index_container']['sfx_search_index'],
		'search_date' => $search_date,
		'browser_ip' => $browser_ip,
		);
	      break;
	    }
        break;

        case 'guides':
	  // Put form info into array expected by search logger / handlers
	  $search_info = array (
	  'search_target' => 'guides',
	  'search_terms' => $form_state['values']['guides']['text_query'],
	  'search_date' => $search_date,
	  'browser_ip' => $browser_ip,
	  );
	break;

        case 'reserves':
	  // Put form info into array expected by search logger / handlers
	  $search_info = array (
	  'search_target' => 'reserves',
	  'search_inst' => $form_state['values']['reserves']['ucla_reserves_inst_index'],
	  'search_dept' => $form_state['values']['reserves']['ucla_reserves_dept_index'],
	  'search_crse' => $form_state['values']['reserves']['ucla_reserves_crse_index'],
	  'search_pid' => $form_state['values']['reserves']['search_pid'],
	  'search_seq' => $form_state['values']['reserves']['search_seq'],
	  'search_date' => $search_date,
	  'browser_ip' => $browser_ip,
	  );
        break;

        case 'oac':
	  // Put form info into array expected by search logger / handlers
	  $search_info = array (
	  'search_target' => 'oac',
	  'search_terms' => $form_state['values']['oac']['text_query'],
	  'search_date' => $search_date,
	  'browser_ip' => $browser_ip,
	  );
	break;

        default:
          // Not recognized.
	  $search_info = array (
	  'search_target' => 'error',
	  'search_terms' => 'BAD SEARCH - COULD NOT ID TAB',
	  'search_date' => $search_date,
	  'browser_ip' => $browser_ip,
	  );
        break;
      }

    // Log the search info before doing the search
//    ucla_search_log_search($search_info);
    // Send search info to router, which will do the actual search
    ucla_search_route_search($search_info);
    }
    else {
      $form_state['values']['ucla_form_id'] = $maps;
    }
  }

  // @fixme Define: search_terms search_index search_year search_categories.
}


/** ***********************************************************************************************************************
 * Implements hook_block_info() to define a new block for the custom form
 */
function ucla_tabbed_block_info() {
  $blocks['ucla_tabbed'] = array(
    'info' => t('UCLA Custom Search Block'),
    'cache' => DRUPAL_NO_CACHE
  );
  $blocks['ucla_tab_search'] = array(
    'info' => t('UCLA Tabbed Search Block'),
  );
  return $blocks;
}


/** ***********************************************************************************************************************
 * Implements hook_block_view() to add the custom form to the new block
 */
function ucla_tabbed_block_view( $delta = '') {
  $block = array();
  switch ($delta) {
    case 'ucla_tabbed':
      $block['title'] = 'UCLA Search';
      $block['content'] = drupal_render(drupal_get_form('ucla_tabbed_custom_form'));
      break;
    case 'ucla_tab_search':
      $block['title'] = 'UCLA Search';
      $block['content'] = drupal_get_form('ucla_tab_search_form');
      break;
  }
  return $block;
}


/** ***********************************************************************************************************************
 * Implements hook_menu() 
 */
// not needed if using this in a block instead
/**************************
function ucla_tabbed_menu() {
  $items['customsearch/ucla'] = array(
    'title' => 'UCLA custom search',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ucla_tabbed_custom_form'),
    'access callback' => TRUE
  );

  return $items;
}
**************************/


/** ***********************************************************************************************************************
 * Implements hook_views_api()
 * Actual views integration code is in ucla_tabbed.views.inc
 */
function ucla_tabbed_views_api() {
  return array(
    'api' => 3
  );
}
